"""Human-friendly fitness assessment generation utilities"""
from datetime import datetime
from typing import Dict, List, Any


class ReasoningGenerator:
    """Generates markdown reasoning output for resume generation process"""
    
    def __init__(self):
        self.job_description = ""
        self.extracted_keywords = ""
        self.ai_reasoning = ""
        self.search_results = []
        self.selected_content = {}
        self.omitted_content = {}
        self.generation_metadata = {}
    
    def set_job_analysis(self, job_description: str, keywords: str, reasoning: str = ""):
        """Set job description analysis results"""
        self.job_description = job_description
        self.extracted_keywords = keywords
        self.ai_reasoning = reasoning
    
    def set_search_results(self, search_results: List[Any]):
        """Set vector search results"""
        self.search_results = search_results
    
    def set_content_selection(self, selected: Dict[str, Any], omitted: Dict[str, Any]):
        """Set selected and omitted content with reasoning"""
        self.selected_content = selected
        self.omitted_content = omitted
    
    def set_metadata(self, metadata: Dict[str, Any]):
        """Set generation metadata"""
        self.generation_metadata = metadata
    
    def generate_reasoning_markdown(self) -> str:
        """Generate human-friendly fitness assessment"""
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        
        markdown = f"""# Why You're Perfect for This Role

*Generated on {timestamp}*

---

## 🎯 **Role Overview**

**Position**: {self._extract_job_title()}

**Key Requirements**: {self._extract_key_requirements()}

---

## 💪 **Your Strongest Qualifications**

{self._generate_strength_analysis()}

---

## 🔗 **Perfect Skill Alignment**

{self._generate_skill_alignment()}

---

## 🏆 **Relevant Experience Highlights**

{self._generate_experience_highlights()}

---

## 🚀 **Unique Value You Bring**

{self._generate_value_proposition()}

---

## 📝 **Cover Letter Talking Points**

{self._generate_cover_letter_points()}

---

## 🎯 **Why This Match Works**

{self._generate_fit_summary()}

---

*This assessment was generated by analyzing your background against the specific job requirements to highlight your strongest qualifications and unique fit for this role.*
"""
        return markdown
    
    def _truncate_job_description(self, max_length: int = 500) -> str:
        """Truncate job description for display"""
        if len(self.job_description) <= max_length:
            return self.job_description
        return self.job_description[:max_length] + "\n... (truncated)"
    
    def _extract_job_title(self) -> str:
        """Extract job title from job description"""
        # Look for common job title patterns
        desc = self.job_description
        
        # Try to find explicit job titles
        import re
        title_patterns = [
            r'(.*?)\s+position',
            r'(.*?)\s+role',
            r'seeking\s+a\s+(.*?)\s+(with|to|for)',
            r'hiring\s+a\s+(.*?)\s+(with|to|for)',
            r'^(.*?)\s+(with|requiring|needed)',
        ]
        
        for pattern in title_patterns:
            match = re.search(pattern, desc, re.IGNORECASE)
            if match:
                title = match.group(1).strip()
                if len(title) > 5 and len(title) < 50:  # Reasonable title length
                    return title.title()
        
        # Fallback: look for keywords that suggest a role
        if 'engineer' in desc.lower():
            if 'software' in desc.lower():
                return "Software Engineer"
            elif 'devops' in desc.lower():
                return "DevOps Engineer"
            elif 'machine learning' in desc.lower():
                return "Machine Learning Engineer"
            else:
                return "Engineer"
        elif 'developer' in desc.lower():
            if 'full stack' in desc.lower():
                return "Full Stack Developer"
            elif 'frontend' in desc.lower() or 'front-end' in desc.lower():
                return "Frontend Developer"
            elif 'backend' in desc.lower() or 'back-end' in desc.lower():
                return "Backend Developer"
            else:
                return "Developer"
        elif 'scientist' in desc.lower():
            return "Data Scientist"
        elif 'analyst' in desc.lower():
            return "Data Analyst"
        else:
            return "Technical Role"
    
    def _extract_key_requirements(self) -> str:
        """Extract key requirements from job description"""
        if self.extracted_keywords:
            keywords = [kw.strip() for kw in self.extracted_keywords.split(',') if kw.strip()]
            if keywords:
                # Take the most important ones (first 5-7)
                key_reqs = keywords[:7]
                return ", ".join(key_reqs)
        
        # Fallback: extract from job description
        return "See job description for specific requirements"
    
    def _generate_strength_analysis(self) -> str:
        """Analyze candidate's strongest qualifications"""
        if not self.selected_content:
            return "Analysis based on your background and experience."
        
        strengths = []
        
        # Analyze work experience
        work_items = self.selected_content.get('work', [])
        if work_items:
            top_work = max(work_items, key=lambda x: x.get('_relevance_score', 0))
            score = top_work.get('_relevance_score', 0)
            company = top_work.get('company', 'Previous Company')
            position = top_work.get('position', 'Previous Role')
            summary = top_work.get('summary', '')
            
            if score > 0.6:
                strengths.append(f"**🎯 Highly Relevant Experience**: Your role as {position} at {company} directly aligns with this position's requirements. {summary[:100]}...")
            elif score > 0.4:
                strengths.append(f"**📈 Transferable Experience**: Your background as {position} at {company} provides relevant skills that translate well to this role.")
            
        # Analyze skills
        skills_items = self.selected_content.get('skills', [])
        if skills_items:
            skill_names = []
            for skill in skills_items:
                if 'keywords' in skill:
                    skill_names.extend(skill['keywords'][:3])  # Top 3 from each category
            
            if skill_names:
                strengths.append(f"**🔧 Technical Expertise**: You have demonstrated proficiency in key technologies including {', '.join(skill_names[:5])}.")
        
        # Analyze projects
        project_items = self.selected_content.get('projects', [])
        if project_items:
            top_project = max(project_items, key=lambda x: x.get('_relevance_score', 0))
            project_name = top_project.get('name', 'Key Project')
            
            strengths.append(f"**🚀 Proven Track Record**: Your {project_name} project demonstrates hands-on experience with relevant technologies and successful project delivery.")
        
        if not strengths:
            strengths.append("**💪 Strong Foundation**: Your background shows a solid foundation in technical skills and experience relevant to this role.")
        
        return "\n\n".join(strengths)
    
    def _generate_skill_alignment(self) -> str:
        """Show how skills match requirements"""
        if not self.extracted_keywords or not self.selected_content.get('skills'):
            return "Your technical skills align well with the role requirements."
        
        requirements = [kw.strip() for kw in self.extracted_keywords.split(',') if kw.strip()]
        
        # Get candidate skills
        candidate_skills = []
        for skill_section in self.selected_content.get('skills', []):
            if 'keywords' in skill_section:
                candidate_skills.extend(skill_section['keywords'])
        
        alignments = []
        
        # Find direct matches
        direct_matches = []
        for req in requirements[:5]:  # Check top 5 requirements
            for skill in candidate_skills:
                if req.lower() in skill.lower() or skill.lower() in req.lower():
                    direct_matches.append((req, skill))
                    break
        
        if direct_matches:
            alignments.append("**🎯 Direct Skill Matches:**")
            for req, skill in direct_matches[:4]:  # Show top 4
                alignments.append(f"- **{req}**: You have hands-on experience with {skill}")
            alignments.append("")
        
        # Show broader alignment
        alignments.append("**🔗 Complementary Skills:**")
        alignments.append(f"Your experience with {', '.join(candidate_skills[:6])} provides a strong technical foundation that supports the role's requirements.")
        
        return "\n".join(alignments)
    
    def _generate_experience_highlights(self) -> str:
        """Highlight most relevant experience"""
        work_items = self.selected_content.get('work', [])
        if not work_items:
            return "Your professional experience demonstrates relevant capabilities for this role."
        
        highlights = []
        
        # Sort by relevance score
        sorted_work = sorted(work_items, key=lambda x: x.get('_relevance_score', 0), reverse=True)
        
        for i, work in enumerate(sorted_work[:2], 1):  # Top 2 most relevant
            company = work.get('company', 'Company')
            position = work.get('position', 'Position')
            summary = work.get('summary', '')
            highlights_list = work.get('highlights', [])
            score = work.get('_relevance_score', 0)
            
            if score > 0.5:
                relevance_text = "Highly relevant"
            elif score > 0.4:
                relevance_text = "Very relevant"
            else:
                relevance_text = "Relevant"
            
            highlights.append(f"**{i}. {position} at {company}** ({relevance_text})")
            if summary:
                highlights.append(f"   {summary}")
            
            if highlights_list:
                highlights.append("   Key achievements:")
                for highlight in highlights_list[:3]:  # Top 3 achievements
                    highlights.append(f"   • {highlight}")
            highlights.append("")
        
        return "\n".join(highlights)
    
    def _generate_value_proposition(self) -> str:
        """Generate unique value proposition"""
        propositions = []
        
        # Analyze what makes them unique
        work_count = len(self.selected_content.get('work', []))
        skills_count = len(self.selected_content.get('skills', []))
        projects_count = len(self.selected_content.get('projects', []))
        
        if work_count >= 2:
            propositions.append("**🎯 Proven Experience**: You bring demonstrated success across multiple roles, showing career progression and adaptability.")
        
        if skills_count >= 2:
            propositions.append("**🛠️ Technical Versatility**: Your diverse skill set spanning multiple technologies makes you a well-rounded candidate who can contribute across different areas.")
        
        if projects_count >= 1:
            propositions.append("**🚀 Hands-On Builder**: Your project portfolio demonstrates not just theoretical knowledge but practical implementation skills.")
        
        # Add unique combination value
        propositions.append("**🌟 Unique Combination**: The intersection of your technical skills, practical experience, and proven track record creates a compelling profile that stands out from typical candidates.")
        
        return "\n\n".join(propositions)
    
    def _generate_cover_letter_points(self) -> str:
        """Generate specific talking points for cover letter"""
        points = []
        
        points.append("### Opening Statement")
        job_title = self._extract_job_title()
        points.append(f'*"I am excited to apply for the {job_title} position, as my background in [specific area] aligns perfectly with your requirements."*')
        points.append("")
        
        points.append("### Key Selling Points")
        
        # Most relevant experience
        work_items = self.selected_content.get('work', [])
        if work_items:
            top_work = max(work_items, key=lambda x: x.get('_relevance_score', 0))
            company = top_work.get('company', 'my previous company')
            position = top_work.get('position', 'my previous role')
            points.append(f"- *\"In my role as {position} at {company}, I successfully [specific achievement that relates to job requirements]\"*")
        
        # Technical skills
        if self.extracted_keywords:
            key_skills = [kw.strip() for kw in self.extracted_keywords.split(',')[:3] if kw.strip()]
            if key_skills:
                points.append(f"- *\"My expertise in {', '.join(key_skills)} directly addresses your core technical requirements\"*")
        
        # Unique value
        points.append("- *\"What sets me apart is my combination of [technical depth] and [practical experience], allowing me to deliver immediate value while growing with the team\"*")
        points.append("")
        
        points.append("### Closing Statement")
        points.append('*"I would welcome the opportunity to discuss how my background and passion for [relevant area] can contribute to [Company]\'s continued success."*')
        
        return "\n".join(points)
    
    def _generate_fit_summary(self) -> str:
        """Generate overall fit assessment"""
        # Calculate overall match quality
        all_scores = []
        for section_items in self.selected_content.values():
            if isinstance(section_items, list):
                for item in section_items:
                    score = item.get('_relevance_score')
                    if score and isinstance(score, (int, float)):
                        all_scores.append(score)
        
        if all_scores:
            avg_score = sum(all_scores) / len(all_scores)
            if avg_score > 0.6:
                fit_level = "excellent"
                confidence = "very confident"
            elif avg_score > 0.5:
                fit_level = "strong"
                confidence = "confident"
            else:
                fit_level = "good"
                confidence = "optimistic"
        else:
            fit_level = "strong"
            confidence = "confident"
        
        summary = f"""This is an **{fit_level} match** for several key reasons:

1. **Technical Alignment**: Your skills directly address the core requirements
2. **Experience Relevance**: Your background shows proven success in similar contexts  
3. **Growth Potential**: Your diverse experience positions you to excel and grow in this role
4. **Cultural Fit**: Your demonstrated adaptability and learning ability align with dynamic team environments

**Bottom Line**: You should feel **{confidence}** applying for this position. Your combination of technical skills, relevant experience, and proven track record makes you a compelling candidate who can contribute immediately while bringing fresh perspectives to the team."""

        return summary


def create_reasoning_generator() -> ReasoningGenerator:
    """Create a new reasoning generator instance"""
    return ReasoningGenerator()